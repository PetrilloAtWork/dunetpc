BEGIN_PROLOG

protodunespdata_nfsp: 
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        
        # Libraries in which to look for WCT components
        plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]
        
        # The tool marshals the art::Event to these visitors before.
        # See notes below in params.
        inputers: ["wclsRawFrameSource"
                   # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
                   # and you must have geo::Geometry service in your environment.
                   # ,"wclsMultiChannelNoiseDB"  
               ]
        
        # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
        # fixme: https:#github.com/WireCell/larwirecell/issues/3
        #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
        outputers: ["wclsFrameSaver:spsaver"]

        # This sets the "main" Jsonnet file which provides the 
        # configuration for the Wire-Cell Toolkit components.  It is
        # take as relative to entries in WIRECELL_PATH.
        configs: ["pgrapher/experiment/pdsp/wcls-nf-sp.jsonnet"]

        # Set the "external variables" required by the Jsonnet.
        params : {
            # This locates the input raw::RawDigit collection in the art::Event 
            raw_input_label: "tpcrawdecoder:daq"

            # Set "data" vs. "sim".  The epoch below probably should follow suit.
            reality: "data"
            # reality: "sim"

            # if epoch is "dynamic" you MUST add
            # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
            # add it if not "dynamic"
            # epoch: "dynamic"
            # epoch: "perfect"
            epoch: "after"

            # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
            signal_output_form: "sparse"
        }
    }
}

protodunespdata_wctsp: 
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        
        # Libraries in which to look for WCT components
        plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]
        
        # The tool marshals the art::Event to these visitors before.
        # See notes below in params.
        inputers: ["wclsCookedFrameSource"
                   # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
                   # and you must have geo::Geometry service in your environment.
                   # ,"wclsMultiChannelNoiseDB"  
               ]
        
        # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
        # fixme: https://github.com/WireCell/larwirecell/issues/3
        #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
        outputers: ["wclsFrameSaver:spsaver"]
        
        # This sets the "main" Jsonnet file which provides the 
        # configuration for the Wire-Cell Toolkit components.  It is
        # take as relative to entries in WIRECELL_PATH.
        configs: ["pgrapher/experiment/pdsp/wcls-sp.jsonnet"]
    
        # Set the "external variables" required by the Jsonnet.
        params : {
            # This locates the input raw::RawDigit collection in the art::Event 
            #raw_input_label: "tpcrawdecoder:daq"
            raw_input_label: "caldata"
            
            # Set "data" vs. "sim".  The epoch below probably should follow suit.
            reality: "data"
            # reality: "sim"

            # if epoch is "dynamic" you MUST add
            # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
            # add it if not "dynamic"
            # epoch: "dynamic"
            # epoch: "perfect"
            epoch: "after"
            
            # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
            signal_output_form: "sparse"
        }
    }
}

# This rewrites existing raw::RawDigit and recob::Wire
# collections in order to truncate and scale them.  This is not
# WCT related but happens to run generic art modules currently
# living in larwirecell.  The intention is to satisfy
# assumptions made by legacy code.
protodunespdata_digitwire : {
    module_type : "EventButcher"
    
    inRawTag: "tpcrawdecoder:daq"
    inSigTag: "wclsdatasp:gauss:"

    # apparently downstream code is too brittle to handle giving
    # any instance names.
    
    outRawTag: ""
    outSigTag: ""
    outAssnTag: ""
    
    # don't throw away data
    
    ndrop: 0
    nkeep: -1
    
    # match some arbitrary and inexplicable "ADC" charge scale
    # instead of number of ionized electrons.
    
    sigscale: 0.005
}



END_PROLOG
