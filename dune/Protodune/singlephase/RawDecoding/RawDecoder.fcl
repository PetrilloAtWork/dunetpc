BEGIN_PROLOG

crt_raw_decoder:
{
  module_type: "CRTRawDecoder"
  RawDataTag: "daq:ContainerCRT"
  LookForContainer: true
}

timing_raw_decoder:
{
  module_type: "TimingRawDecoder"
  RawDataLabel: "daq"
  OutputDataLabel: "daq"
  UseChannelMap: "true"
  Debug: "false"
  MakeTree: "false"
}

rce_raw_decoder:
{
  module_type: "RceRawDecoder"
  RawDataLabel: "daq"
  OutputDataLabel: "daq"
  ExpectContainerFragments: true
}

felix_raw_decoder:
{
  module_type: "FelixRawDecoder"
  RawDataLabel: "daq"
  OutputDataLabel: "daq"
  ExpectContainerFragments: true
}

# configuration for combined TPC Raw Decoder module. Supersedes the RCE and FELIX
# raw decoder modules listed above.

pdsp_tpc_raw_decoder:
{
  module_type: "PDSPTPCRawDecoder"
  OutputDataLabel: "daq"

  APAsToDecode: []    # a list of APA (=crate) numbers to decode if you want a subset of them
                      # an emtpy list decodes the entire input data

  DefaultCrateIfUnexpected:  3     #  Use for coldbox data -- unexpected means not in the range 1-6.
 
  RCERawDataLabels: [ "daq:ContainerTPC", "daq:TPC" ] # if this list is empty or missing, then read all artdaq fragements with TPC in their labels
  RCEEnforceFragmentTypeMatch: false   # DAQ group reserves the right to change fragment type numbers
  RCEFragmentType: 2
  RCEDropEventsWithSmallFrags: false
  RCEDropSmallFrags: true
  RCESmallFragSize: 500000
  RCEDropFragsWithBadSF: true    # skip fragments with invalid slot and fiber numbers
  RCEDropFragsWithBadC: true     # skip fragments with invalid crate numbers
  RCEHexDump: false
  RCESaveFragsToFiles: false
  RCECheckBufferSize: true
  RCEBufferSizeCheckLimit: 10000000

  RCEFIX110:                         true   # shift waveforms for ASIC 3 on FEMB 110
  RCEFIX110NTICKS:                   18     # number of ticks to shift waveforms on FEMB 110 ASIC 3

  FELIXRawDataLabels: [ "daq:ContainerFELIX", "daq:FELIX" ]   # if this list is empty or missing, then read all artdaq fragements with FELIX in their labels
  FELIXEnforceFragmentTypeMatch: false   # DAQ group reserves the right to change fragment type numbers
  FELIXFragmentType: 8  
  FELIXDropFragsWithBadSF: true   # drop fragments with bad slot or fiber numbers
  FELIXDropFragsWithBadC: true    # drop fragments with ununderstood crate numbers
  FELIXHexDump: false
  FELIXDropEventsWithSmallFrags: false
  FELIXDropSmallFrags: true
  FELIXSmallFragSize: 10000
  FELIXCheckBufferSize: true
  FELIXBufferSizeCheckLimit: 10000000

  CompressHuffman: false
  PrintColdataConvertCount: false

  MakeHistograms: false #for making error monitoring histograms

# enforcement flags.  If these are set to true and the data completeness 
# conditions are not met, then an emtpy collection of raw::RawDigits is 
# put in the event

# if set to true, the number of channels present in the fragments must be
# the FullChannelCount below.

  EnforceFullChannelCount: false
  FullChannelCount: 15360

# requires that we don't see the same channel twice in in an event

  EnforceNoDuplicateChannels: true

# requires that all channels have the same number of ticks (on each event separately)

  EnforceSameTickCount: false

# requires that all channels have the specified number of ticks

  EnforceFullTickCount: false
  FullTickCount: 6000

# requires that no errors are reported by the unpacker (checksum or capture errors)

  EnforceErrorFree: false

}

ssp_raw_decoder:
{

  module_type: "SSPRawDecoder"
  RawDataLabel: "daq"
   
  SplitTriggers: false           # If true, split into external and internal trigger data products
  OutputDataLabel: "daq"         # Used if SplitTriggers = false
  ExtTrigOutputLabel: "external" # Used if SplitTriggers = true
  IntTrigOutputLabel: "internal" # Used if SPlitTriggers = true
   
#  UseChannelMap: "true"
  UseChannelMap: "false"
  Debug: "false"
  MakeTree: "false"
  verbose_metadata: "false"
  verbose_adcs: 0

  number_of_packets: 12  # number of channels per SSP

  SSP_m1: 10   # samples used to calculate peak height
  SSP_m2: 10   # samples used to calculate integral
  SSP_i1: 40  # samples used to calculate pedestal
  SSP_i2: 1200  # samples used to calculate peak height

  NOvAClockFrequency: 150.0 # MHz
  SPESize: 25
 
}

ssp_raw_decoder_split: @local::ssp_raw_decoder
ssp_raw_decoder_split.SplitTriggers: true


ctb_raw_decoder:
{
  module_type: "PDSPCTBRawDecoder"
  InputLabel: "daq"
  InputContainerInstance: "ContainerCTB"
  InputNonContainerInstance: "CTB"
  OutputLabel: "daq"
}

online_monitor:
{
  module_type:     "OnlineMonitor"
  TPCInputModule:  "rcerawdecoder"
  TPCInstanceName: "daq"
  FELIXInputModule:  "felixrawdecoder"
  FELIXInstanceName: "daq"
}

tpc_fft:
{
  module_type:     "TpcFFT"
  TPCInputModule:  "rcerawdecoder"
  TPCInstanceName: "daq"  
}

ssp_evt_analyzer:
{
  module_type:     "PDRawEVD"
  SSPInputModule:  "ssprawdecoder"
  SSPInstanceName: "daq"  
}

END_PROLOG
