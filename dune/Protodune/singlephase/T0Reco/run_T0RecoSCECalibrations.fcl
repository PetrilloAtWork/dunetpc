#include "services_dune.fcl"
#include "triggeralgo_service.fcl"
#include "T0RecoSCECalibrations.fcl"

process_name: T0RecoSCECalibrations

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "T0RecoSCE_ana.root" }
  TimeTracker:             {}
  ExptGeoHelperInterface:         @local::dune_geometry_helper
  Geometry:                       @local::protodune_geo
  DetectorProperties:             @local::protodune_detproperties
  LArProperties:                  @local::dunefd_properties
  DetectorClocksService:          @local::protodune_detectorclocks
  MemoryTracker:           { } # default is one
  RandomNumberGenerator:   {} #ART native random number generator
  message:                 @local::dune_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_mc
  				@table::protodune_services
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 analyzers:
 {
        t0ana : @local::T0RecoSCECalibrations
 }

 ana:       [ t0ana ]
 end_paths: [ ana ]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
